// A very simple example of a massively parallel program
// Creates a tree with numbers and then sums all values in parallel

/*{*/
  import { swit, fold, bend, type, branch, recursive } from '../script';
/*}*/

// a binary tree
type.loop(`MyTree`)
  .branch(`Node`, [
    'val', 
    recursive('left'),
    recursive('right'),
  ])
  .branch(`Leaf`, [])

// sums all values in a tree
function sum(tree) {
  fold.loop(`tree`)
    .case(`MyTree/Node`, () => {
      return tree.val + tree.left + tree.right
    })
    .case(`MyTree/Leaf`, () => {
      return 0
    })
}

// generates a binary tree of given depth
function gen(depth) {
  /*{*/let tree;/*}*/
  bend.loop({ height: 0, val: 1 })
    .when(`height < depth`, (that) => {
      tree = branch.grow(`MyTree/Node`, { 
        val: that.val, 
        left: this.fork(that.height + 1, 2 * that.val), 
        right: this.fork(that.height + 1, 2 * that.val + 1)
      })
    })
    .else((that) => {
      tree = branch.grow(`MyTree/Leaf`, {})
    });

  return tree
}

// returns the sum of [1 .. 2^16), truncated to 24 bits
(function () {
  return sum(gen(16))
})()